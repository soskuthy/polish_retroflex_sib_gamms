theme(axis.title=element_text(size=14, face="bold"),
axis.text=element_text(size=14),
strip.text=element_text(size=14),
panel.grid=element_blank())
animate(p, nframes=101, fps=24)
preds_czdz <- expand.grid(Palatalization=as.ordered(factor(c("plain","palatalized"), levels=c("plain","palatalized"))),
Voicing=as.ordered(factor(c("voiceless"), levels=c("voiceless","voiced"))),
time=seq(0,1,0.01),
sensor=1:4,
Speaker=filter(czdz_x, Speaker=="F9")$Speaker[1],
Word=czdz_x$Word[1])
preds_szz <- expand.grid(Palatalization=as.ordered(factor(c("plain","palatalized"), levels=c("plain","palatalized"))),
Voicing=as.ordered(factor(c("voiced"), levels=c("voiceless","voiced"))),
time=seq(0,1,0.01),
sensor=1:4,
Speaker=filter(szz_x, Speaker=="F9")$Speaker[1],
Word=szz_x$Word[1])
preds_czdz$xfit <- predict(czdz_gam_hor, newdata=preds_czdz, se=T,
exclude=c("s(Word)"))$fit
preds_czdz$yfit <- predict(czdz_gam_ver, newdata=preds_czdz, se=T,
exclude=c("s(Word)"))$fit
preds_szz$xfit <- predict(szz_gam_hor, newdata=preds_szz, se=T,
exclude=c("s(Word)"))$fit
preds_szz$yfit <- predict(szz_gam_ver, newdata=preds_szz, se=T,
exclude=c("s(Word)"))$fit
preds <- rbind(preds_szz, preds_czdz)
preds$sensor_text <- c("TT","TF","TD","TB")[preds$sensor]
preds$Voicing <- recode(preds$Voicing,
voiceless="vl affricate",
voiced="vd fricative")
ipa_text <- data.frame(
Voicing=c("vd fricative","vd fricative","vl affricate","vl affricate"),
Palatalization=c("plain","palatalized","plain","palatalized"),
xfit=c(60,60,60,60),
yfit=c(-17,-17,-17,-17),
ipa=c("ʐ","ʐʲ","tʂ","tʂʲ")
)
p <- ggplot(preds, aes(x=xfit, y=yfit)) +
facet_grid(Voicing~Palatalization) +
geom_line() +
geom_point(pch=16) +
geom_text(aes(y=yfit+1, label=sensor_text)) +
geom_text(data=ipa_text, aes(label=ipa), size=8) +
transition_time(time) +
ease_aes('linear') +
labs(title = 'Speaker F9 (Fig. 19); Relative time: {frame_time}') +
scale_x_reverse(limits=c(62,23)) +
xlab("horizontal sensor position (mm)") +
ylab("vertical sensor position (mm)") +
theme_bw() +
theme(axis.title=element_text(size=14, face="bold"),
axis.text=element_text(size=14),
strip.text=element_text(size=14),
panel.grid=element_blank())
animate(p, nframes=101, fps=24)
preds <- expand.grid(Palatalization=as.ordered(factor(c("plain","palatalized"), levels=c("plain","palatalized"))),
Voicing=as.ordered(factor(c("voiceless","voiced"), levels=c("voiceless","voiced"))),
time=seq(0,1,0.01),
sensor=1:4,
Speaker=filter(szz_x, Speaker=="M4")$Speaker[1],
Word=szz_x$Word[1])
pred_xs <- predict(szz_gam_hor, newdata=preds, se=T,
exclude=c("s(Word)"))
pred_ys <- predict(szz_gam_ver, newdata=preds, se=T,
exclude=c("s(Word)"))
preds$xfit <- pred_xs$fit
preds$yfit <- pred_ys$fit
preds$sensor_text <- c("TT","TF","TD","TB")[preds$sensor]
ipa_text <- data.frame(
Voicing=c("voiceless","voiceless","voiced","voiced"),
Palatalization=c("plain","palatalized","plain","palatalized"),
xfit=c(18,18,18,18),
yfit=c(3,3,3,3),
ipa=c("ʂ","ʂʲ","ʐ","ʐʲ")
)
p <- ggplot(preds, aes(x=xfit, y=yfit)) +
facet_grid(Voicing~Palatalization) +
geom_line() +
geom_point(pch=16) +
geom_text(aes(y=yfit+1, label=sensor_text)) +
geom_text(data=ipa_text, aes(label=ipa), size=8) +
transition_time(time) +
ease_aes('linear') +
labs(title = 'Speaker M4 (Fig. 20); Relative time: {frame_time}') +
#scale_x_reverse(limits=c(20,-25)) +
xlab("horizontal sensor position (mm)") +
ylab("vertical sensor position (mm)") +
theme_bw() +
theme(axis.title=element_text(size=14, face="bold"),
axis.text=element_text(size=14),
strip.text=element_text(size=14),
panel.grid=element_blank())
animate(p, nframes=101, fps=24)
preds <- expand.grid(Palatalization=as.ordered(factor(c("plain","palatalized"), levels=c("plain","palatalized"))),
Voicing=as.ordered(factor(c("voiceless","voiced"), levels=c("voiceless","voiced"))),
time=seq(0,1,0.01),
sensor=1:4,
Speaker=filter(szz_x, Speaker=="M4")$Speaker[1],
Word=szz_x$Word[1])
pred_xs <- predict(szz_gam_hor, newdata=preds, se=T,
exclude=c("s(Word)"))
pred_ys <- predict(szz_gam_ver, newdata=preds, se=T,
exclude=c("s(Word)"))
preds$xfit <- pred_xs$fit
preds$yfit <- pred_ys$fit
preds$sensor_text <- c("TT","TF","TD","TB")[preds$sensor]
ipa_text <- data.frame(
Voicing=c("voiceless","voiceless","voiced","voiced"),
Palatalization=c("plain","palatalized","plain","palatalized"),
xfit=c(54,54,54,54),
yfit=c(-10,10,10,10),
ipa=c("ʂ","ʂʲ","ʐ","ʐʲ")
)
p <- ggplot(preds, aes(x=xfit, y=yfit)) +
facet_grid(Voicing~Palatalization) +
geom_line() +
geom_point(pch=16) +
geom_text(aes(y=yfit+1, label=sensor_text)) +
geom_text(data=ipa_text, aes(label=ipa), size=8) +
transition_time(time) +
ease_aes('linear') +
labs(title = 'Speaker M4 (Fig. 20); Relative time: {frame_time}') +
scale_x_reverse(limits=c(56,20)) +
xlab("horizontal sensor position (mm)") +
ylab("vertical sensor position (mm)") +
theme_bw() +
theme(axis.title=element_text(size=14, face="bold"),
axis.text=element_text(size=14),
strip.text=element_text(size=14),
panel.grid=element_blank())
animate(p, nframes=101, fps=24)
preds <- expand.grid(Palatalization=as.ordered(factor(c("plain","palatalized"), levels=c("plain","palatalized"))),
Voicing=as.ordered(factor(c("voiceless","voiced"), levels=c("voiceless","voiced"))),
time=seq(0,1,0.01),
sensor=1:4,
Speaker=filter(szz_x, Speaker=="M4")$Speaker[1],
Word=szz_x$Word[1])
pred_xs <- predict(szz_gam_hor, newdata=preds, se=T,
exclude=c("s(Word)"))
pred_ys <- predict(szz_gam_ver, newdata=preds, se=T,
exclude=c("s(Word)"))
preds$xfit <- pred_xs$fit
preds$yfit <- pred_ys$fit
preds$sensor_text <- c("TT","TF","TD","TB")[preds$sensor]
ipa_text <- data.frame(
Voicing=c("voiceless","voiceless","voiced","voiced"),
Palatalization=c("plain","palatalized","plain","palatalized"),
xfit=c(55,55,55,55),
yfit=c(-10,-10,-10,-10),
ipa=c("ʂ","ʂʲ","ʐ","ʐʲ")
)
p <- ggplot(preds, aes(x=xfit, y=yfit)) +
facet_grid(Voicing~Palatalization) +
geom_line() +
geom_point(pch=16) +
geom_text(aes(y=yfit+1, label=sensor_text)) +
geom_text(data=ipa_text, aes(label=ipa), size=8) +
transition_time(time) +
ease_aes('linear') +
labs(title = 'Speaker M4 (Fig. 20); Relative time: {frame_time}') +
scale_x_reverse(limits=c(56,20)) +
xlab("horizontal sensor position (mm)") +
ylab("vertical sensor position (mm)") +
theme_bw() +
theme(axis.title=element_text(size=14, face="bold"),
axis.text=element_text(size=14),
strip.text=element_text(size=14),
panel.grid=element_blank())
animate(p, nframes=101, fps=24)
saveRDS(szz_gam_ver_noAR, "models/szz_gam_ver_noAR.rds")
saveRDS(szz_gam_hor_noAR, "models/szz_gam_hor_noAR.rds")
rmarkdown::render_site()
setwd("/Users/soskuthy/Documents/Research/current/2020/marzena-gamms/GAMMs")
setwd("/Users/soskuthy/Documents/Research/current/2020/marzena-gamms/GAMMs/polish_retroflex_sib_gamms")
rmarkdown::render_site()
rmarkdown::render_site()
options(tidyverse.quiet = TRUE)
library("autocorr")
library("tidyverse")
devtools::install_github("dalejbarr/autocorr")
library("autocorr")
library("tidyverse")
load_results <- function(x, path) {
readRDS(file.path(path, x))
}
rawpath <- "data_raw"
## first thing: consolidate all the results to temp directory
tdir <- tempfile()
dir.create(tdir)
message("    consolidating raw data...")
suppressMessages(consolidate_results(rawpath, tdir))
?sim_2x2
dat <- sim_2x2(A=0.25,
B=0.5,
AB=0.5,
rint=runif(1, 0.105, 0.420),
rslp=runif(1, 0.001, 0.261),
rcorr=runif(1, -0.8, 0.8),
version=1)
ddat
dat
mod <- bam(Y_r ~ A * B +
s(t, id, bs = "fs") +
s(id, W, bs = "re"),
dat=dat,
discrete=T, nthreads=2)
mod <- bam(Y_r ~ A * B +
s(t, id, bs = "fs") +
s(id, A, bs = "re"),
dat=dat,
discrete=T, nthreads=2)
mod <- bam(Y_r ~ A * B +
s(tnum_r, id, bs = "fs") +
s(id, A, bs = "re"),
dat=dat,
discrete=T, nthreads=2)
mod <- bam(Y_r ~ A * B +
s(tnum_r, id, bs = "fs") +
s(subj_id, A, bs = "re"),
dat=dat,
discrete=T, nthreads=2)
mod <- bam(Y_r ~ A * B +
s(tnum_r, subj_id, bs = "fs") +
s(subj_id, A, bs = "re"),
dat=dat,
discrete=T, nthreads=2)
summary(mod)
s <- summary(mod)
s$p.table
dat$A
iterations <- 1
A.sig <- c()
B.sig <- c()
AB.sig <- c()
for (i in 1:iterations) {
dat <- sim_2x2(A=0.25,
B=0.5,
AB=0.5,
rint=runif(1, 0.105, 0.420),
rslp=runif(1, 0.001, 0.261),
rcorr=runif(1, -0.8, 0.8),
version=1)
mod <- bam(Y_r ~ A_c * B_c +
s(tnum_r, subj_id, bs = "fs") +
s(subj_id, A_c, bs = "re"),
dat=dat,
discrete=T, nthreads=2)
s <- summary(mod)
A.sig <- c(A.sig, s$p.table[2,4])
B.sig <- c(B.sig, s$p.table[3,4])
AB.sig <- c(AB.sig, s$p.table[4,4])
}
A.sig
B.sig
AB.sig
iterations <- 100
A.sig <- c()
B.sig <- c()
AB.sig <- c()
for (i in 1:iterations) {
dat <- sim_2x2(A=0.25,
B=0.5,
AB=0.5,
rint=runif(1, 0.105, 0.420),
rslp=runif(1, 0.001, 0.261),
rcorr=runif(1, -0.8, 0.8),
version=1)
mod <- bam(Y_r ~ A_c * B_c +
s(tnum_r, subj_id, bs = "fs", m=1) +
s(subj_id, A_c, bs = "re"),
dat=dat,
discrete=T, nthreads=2)
s <- summary(mod)
A.sig <- c(A.sig, s$p.table[2,4])
B.sig <- c(B.sig, s$p.table[3,4])
AB.sig <- c(AB.sig, s$p.table[4,4])
cat("\r            \r", i, sep="")
}
A.sig
mean(A.sig < 0.05)
mean(B.sig < 0.05)
?s
?factor.smooth.interaction
dat$subj_id
iterations <- 100
A.sig <- c()
B.sig <- c()
AB.sig <- c()
for (i in 1:iterations) {
dat <- sim_2x2(A=0.25,
B=0.5,
AB=0.5,
rint=runif(1, 0.105, 0.420),
rslp=runif(1, 0.001, 0.261),
rcorr=runif(1, -0.8, 0.8),
version=1)
mod <- bam(Y_r ~ A_c * B_c +
s(tnum_r, by=subj_id, bs = "tp", m=1, id=1) +
s(subj_id, bs = "re") +
s(subj_id, A_c, bs = "re"),
dat=dat,
discrete=T, nthreads=2)
s <- summary(mod)
A.sig <- c(A.sig, s$p.table[2,4])
B.sig <- c(B.sig, s$p.table[3,4])
AB.sig <- c(AB.sig, s$p.table[4,4])
cat("\r            \r", i, sep="")
}
A.sig <- c(A.sig, s$p.table[2,4])
mean(A.sig < 0.05)
mean(B.sig < 0.05)
acf(resid_gam(mod))
mod <- bam(Y_r ~ A_c * B_c +
#s(tnum_r, by=subj_id, bs = "tp", m=1, id=1) +
s(subj_id, bs = "re") +
s(subj_id, A_c, bs = "re"),
dat=dat,
discrete=T, nthreads=2)
acf(resid_gam(mod))
?errsim
dat <- sim_2x2(A=0.25,
B=0.5,
AB=0.5,
rint=runif(1, 0.105, 0.420),
rslp=runif(1, 0.001, 0.261),
rcorr=runif(1, -0.8, 0.8),
version=4)
mod <- bam(Y_r ~ A_c * B_c +
#s(tnum_r, by=subj_id, bs = "tp", m=1, id=1) +
s(subj_id, bs = "re") +
s(subj_id, A_c, bs = "re"),
dat=dat,
discrete=T, nthreads=2)
acf(resid_gam(mod))
acf(resid(mod))
ggplot(dat, aes(x=tnum_r, y=Y_r)) + geom_point() + facet_wrap(~subj_id)
mod <- bam(Y_r ~ A_c * B_c +
#s(tnum_r, by=subj_id, bs = "tp", m=1, id=1) +
s(subj_id, bs = "re") +
s(subj_id, A_c, bs = "re"),
dat=dat,
discrete=T, nthreads=2)
acf(resid_gam(mod))
mod
dat
dat <- sim_2x2(A=0.25,
B=0.5,
AB=0.5,
rint=runif(1, 0.105, 0.420),
rslp=runif(1, 0.001, 0.261),
rcorr=runif(1, -0.8, 0.8),
version=4) %>%
arrange(subj_id, tnum_r)
mod <- bam(Y_r ~ A_c * B_c +
#s(tnum_r, by=subj_id, bs = "tp", m=1, id=1) +
s(subj_id, bs = "re") +
s(subj_id, A_c, bs = "re"),
dat=dat,
discrete=T, nthreads=2)
acf(resid_gam(mod))
mod <- bam(Y_r ~ A_c * B_c +
s(tnum_r, by=subj_id, bs = "tp", m=1, id=1) +
s(subj_id, bs = "re") +
s(subj_id, A_c, bs = "re"),
dat=dat,
discrete=T, nthreads=2)
acf(resid_gam(mod))
mod <- bam(Y_r ~ A_c * B_c +
s(tnum_r, by=subj_id, bs = "tp", m=1, id=1, k=20) +
s(subj_id, bs = "re") +
s(subj_id, A_c, bs = "re"),
dat=dat,
discrete=T, nthreads=2)
acf(resid_gam(mod))
mod <- bam(Y_r ~ A_c * B_c +
s(tnum_r, by=subj_id, bs = "ad", m=1, id=1, k=20) +
s(subj_id, bs = "re") +
s(subj_id, A_c, bs = "re"),
dat=dat,
discrete=T, nthreads=2)
acf(resid_gam(mod))
dat
dat <- sim_2x2(A=0.25,
B=0.5,
AB=0.5,
rint=runif(1, 0.105, 0.420),
rslp=runif(1, 0.001, 0.261),
rcorr=runif(1, -0.8, 0.8),
version=4) %>%
arrange(subj_id, tnum_r) %>%
mutate(start=tnum_r==1)
mod <- bam(Y_r ~ A_c * B_c +
s(tnum_r, by=subj_id, bs = "ad", m=1, id=1, k=20) +
s(subj_id, bs = "re") +
s(subj_id, A_c, bs = "re"),
dat=dat,
discrete=T, nthreads=2,
AR.start=dat$start, rho=0.5)
acf(resid_gam(mod))
mod <- bam(Y_r ~ A_c * B_c +
s(tnum_r, by=subj_id, bs = "ad", m=1, id=1, k=20) +
s(subj_id, bs = "re") +
s(subj_id, A_c, bs = "re"),
dat=dat,
discrete=T, nthreads=2,
AR.start=dat$start, rho=0.99)
acf(resid_gam(mod))
mod <- bam(Y_r ~ A_c * B_c +
s(tnum_r, by=subj_id, bs = "tp", m=1, id=1, k=20) +
s(subj_id, bs = "re") +
s(subj_id, A_c, bs = "re"),
dat=dat,
discrete=T, nthreads=2)#,
dat <- sim_2x2(A=0.25,
B=0.5,
AB=0.5,
rint=runif(1, 0.105, 0.420),
rslp=runif(1, 0.001, 0.261),
rcorr=runif(1, -0.8, 0.8),
version=1) %>%
arrange(subj_id, tnum_r) %>%
mutate(start=tnum_r==1)
acf(resid_gam(mod))
mod <- bam(Y_r ~ A_c * B_c +
s(tnum_r, by=subj_id, bs = "tp", m=1, id=1, k=20) +
s(subj_id, bs = "re") +
s(subj_id, A_c, bs = "re"),
dat=dat,
discrete=T, nthreads=2,
AR.start=dat$start, rho=0.99)
acf(resid_gam(mod))
iterations <- 100
A.sig <- c()
B.sig <- c()
AB.sig <- c()
for (i in 1:iterations) {
dat <- sim_2x2(A=0.25,
B=0.5,
AB=0.5,
rint=runif(1, 0.105, 0.420),
rslp=runif(1, 0.001, 0.261),
rcorr=runif(1, -0.8, 0.8),
version=1) %>%
arrange(subj_id, tnum_r) %>%
mutate(start=tnum_r==1)
mod <- bam(Y_r ~ A_c * B_c +
s(tnum_r, by=subj_id, bs = "tp", m=1, id=1, k=10) +
s(subj_id, bs = "re") +
s(subj_id, A_c, bs = "re"),
dat=dat,
discrete=T, nthreads=2,
AR.start=dat$start, rho=0.99)
s <- summary(mod)
A.sig <- c(A.sig, s$p.table[2,4])
B.sig <- c(B.sig, s$p.table[3,4])
AB.sig <- c(AB.sig, s$p.table[4,4])
cat("\r            \r", i, sep="")
}
iterations <- 100
A.sig <- c()
B.sig <- c()
AB.sig <- c()
for (i in 1:iterations) {
dat <- sim_2x2(A=0.25,
B=0.5,
AB=0.5,
rint=runif(1, 0.105, 0.420),
rslp=runif(1, 0.001, 0.261),
rcorr=runif(1, -0.8, 0.8),
version=1) %>%
arrange(subj_id, tnum_r) %>%
mutate(start=tnum_r==1)
mod <- bam(Y_r ~ A_c * B_c +
s(tnum_r, by=subj_id, bs = "fs") +
s(subj_id, bs = "re") +
s(subj_id, A_c, bs = "re"),
dat=dat,
discrete=T, nthreads=2,
AR.start=dat$start, rho=0.99)
s <- summary(mod)
A.sig <- c(A.sig, s$p.table[2,4])
B.sig <- c(B.sig, s$p.table[3,4])
AB.sig <- c(AB.sig, s$p.table[4,4])
cat("\r            \r", i, sep="")
}
iterations <- 100
A.sig <- c()
B.sig <- c()
AB.sig <- c()
for (i in 1:iterations) {
dat <- sim_2x2(A=0.25,
B=0.5,
AB=0.5,
rint=runif(1, 0.105, 0.420),
rslp=runif(1, 0.001, 0.261),
rcorr=runif(1, -0.8, 0.8),
version=1) %>%
arrange(subj_id, tnum_r) %>%
mutate(start=tnum_r==1)
mod <- bam(Y_r ~ A_c * B_c +
s(tnum_r, by=subj_id, bs = "fs") +
s(subj_id, A_c, bs = "re"),
dat=dat,
discrete=T, nthreads=2,
AR.start=dat$start, rho=0.99)
s <- summary(mod)
A.sig <- c(A.sig, s$p.table[2,4])
B.sig <- c(B.sig, s$p.table[3,4])
AB.sig <- c(AB.sig, s$p.table[4,4])
cat("\r            \r", i, sep="")
}
mean(B.sig < 0.05)
